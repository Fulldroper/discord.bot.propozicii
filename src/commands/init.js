module.exports.info = {
  "name": "init",
  "dm_permission": false,
  "type": 1,
  "description": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞",
  "options": [
    {
      "name": "name",
      "description": "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É —è–∫–∏–π –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π",
      "type": 3,
      "required": false
    },
    {
      "name": "channel",
      "description": "–í–∫–∞–∂—ñ—Ç—å –∫–∞–Ω–∞–ª —è–∫–∏–π –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π",
      "type": 7,
      "channel_types": [15],
      "required": false
    },
    {
      "name": "alert",
      "description": "–í–∫–∞–∑–∞—Ç–∏ —á–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ—Ä–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è? (–¢–∞–∫ –∞–±–æ –ù—ñ)",
      "type": 5,
      "required": false
    },
    {
      "name": "rate_limit",
      "description": "–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥, —è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —á–µ–∫–∞—Ç–∏, –ø–µ—Ä—à –Ω—ñ–∂ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–æ 21600)",
      "type": 4,
      "min_value": 0,
      "max_value": 21600000,
      "choices": [
        { "name": "15 —Å–µ–∫—É–Ω–¥", "value": 5000 },
        { "name": "30 —Å–µ–∫—É–Ω–¥", "value": 30000 },
        { "name": "1 —Ö–≤–∏–ª–∏–Ω–∞", "value": 60000 },
        { "name": "10 —Ö–≤–∏–ª–∏–Ω", "value": 600000 },
        { "name": "30 —Ö–≤–∏–ª–∏–Ω", "value": 1800000 },
        { "name": "1 –≥–æ–¥–∏–Ω–∞", "value": 3600000 },
        { "name": "6 –≥–æ–¥–∏–Ω", "value": 21600000 },
      ],
      "required": false
    },
    {
      "name": "mention",
      "description": "–í–∫–∞–∂—ñ—Ç—å —Ä–æ–ª—å —è–∫–∞ –±—É–¥–µ –∑–≥–∞–¥—É–≤–∞—Ç–∏—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      "type": 8,
      "required": false
    }
  ]
}

module.exports.run = async function(interaction) {
  // Get the values of the "name", "channel", and "alert" options from the interaction
  const name = interaction.options.get("name")
  const channel = interaction.options.get("channel")
  const alert = interaction.options.get("alert")
  const rate_limit = interaction.options.get("rate_limit")
  const mention = interaction.options.get("mention")
  // Check if the user who triggered the interaction has the "Administrator" permission
  if (!interaction.member.permissions.serialize().Administrator) {
    // If not, send a reply indicating that the command is only available to administrators
    interaction.reply({ content: '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó, –≤–∏ –º–∞—î—Ç–µ –º–∞—Ç–∏ –ø—Ä–∞–≤–æ `ADMINISTRATOR`', ephemeral: true })
    return
  }
  // Check if the bot has the "Administrator" permission in the server
  const mePerm = interaction.guild.members.me.permissions.toArray()

  if (!mePerm.includes("Administrator")) {
    let content = ''
    // If the bot doesn't have the "Administrator" permission, check for other necessary permissions
    mePerm.includes('SendMessages')   || (content += '\n`SendMessages`')
    mePerm.includes('ManageChannels') || (content += '\n`ManageChannels`')
    mePerm.includes('AddReactions')   || (content += '\n`AddReactions`')
    mePerm.includes('ViewChannel')    || (content += '\n`ViewChannel`')
    mePerm.includes('ManageChannels') || (content += '\n`ManageChannels`')
    mePerm.includes('ManageWebhooks') || (content += '\n`ManageWebhooks`')

    if (content.length > 0) {
      // If the bot doesn't have the necessary permissions, send a reply indicating which permissions are required
      interaction.reply({content: '–î–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–æ–∑–≤—ñ–ª –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø—Ä–∞–≤–æ:\n' + content, ephemeral: true})
      return
    }
  }
  
  if (channel) {
    // if no name is provided but a channel is, set permissions for the channel
    // to prevent the "everyone" role from sending messages, and allow the bot to send messages
    const { availableTags } = await interaction.guild.channels.edit(channel.channel, {
      name: name?.value ? name?.value : channel.channel.name,
      type: 15,
      // rateLimitPerUser: rate_limit?.value || 0,
      availableTags: [
        { name: "–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ", emoji: { name: "üëÄ" }},
        { name: "–ü—Ä–∏–π–Ω—è—Ç–æ", emoji: { name: "‚úÖ" }},
        { name: "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ", emoji: { name: "‚ùå" }},
      ],
      defaultSortOrder: 1,
      defaultForumLayout: 1,
      defaultAutoArchiveDuration: 10080,
      reason: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π",
      permissionOverwrites:[
        {
          id: interaction.guild.roles.everyone.id,
          deny: ['SendMessages'],
        },
        {
          id: this.user.id,
          allow: ['SendMessages'],
        },
      ]
    });
    // saving tags ids
    let tags = {}
    for (const tag of availableTags) {
      const lib = {
        '–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ': 'wait',
        '–ü—Ä–∏–π–Ω—è—Ç–æ': 'accept',
        '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ': 'deny',
      }
      
      tags[
        lib[tag.name]
      ] = tag.id
    }
    // rate_limit?.value && channel.channel.setRateLimitPerUser(rate_limit?.value || 0, "–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥, —è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —á–µ–∫–∞—Ç–∏, –ø–µ—Ä—à –Ω—ñ–∂ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    // creating webhook
    const webhook = (await channel.channel.createWebhook({
      name: this.user.username,
      avatar: await this.user.avatarURL(),
    }).catch(e => this.emit('error', e))).url
    // save the channel and alert settings to the database
    await this.db.set(`${this.collection}:${interaction.guildId}`,{
      channel: channel.value,
      alert: alert?.value || false,
      rate_limit: rate_limit?.value || 0,
      mention: mention?.value || 0,
      tags, webhook
    })
    // reply to the user with a success message and the settings that were applied
    interaction.reply({
      content: 
      `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\n\n- –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª <#${
        channel.value
      }> –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π\n- —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∞–º –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ${
        alert?.value ? '**–£–≤—ñ–º–∫–Ω—É—Ç–æ**' : '**–í–∏–º–∫–Ω—É—Ç–æ**'
      }\n - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥, —è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —á–µ–∫–∞—Ç–∏ ${
        rate_limit?.value ? `**${rate_limit?.value} c–µ–∫.**` : "**–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**"
      }\n - –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ ${
        mention?.value ? `<@&${mention?.value}> (—è–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ–∫–∏, –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —Ä–æ–ª—ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è)` : "**–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**"
      }`,
      ephemeral: true
    }).catch(e => this.emit('error', e))
    return
  } else if (name && !channel) {
    // if a name is provided but no channel is, create a new channel with the provided name
    // and set the same permissions as above
    const channel = await interaction.guild.channels.create({
      name: name.value,
      type: 15,
      // rateLimitPerUser: rate_limit?.value || 0,
      availableTags: [
        { name: "–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ", emoji: { name: "üëÄ" }},
        { name: "–ü—Ä–∏–π–Ω—è—Ç–æ", emoji: { name: "‚úÖ" }},
        { name: "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ", emoji: { name: "‚ùå" }},
      ],
      defaultSortOrder: 1,
      defaultForumLayout: 1,
      defaultAutoArchiveDuration: 10080,
      reason: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π",
      permissionOverwrites:[
        {
          id: interaction.guild.roles.everyone.id,
          deny: ['SendMessages'],
        },
        {
          id: this.user.id,
          allow: ['SendMessages'],
        },
      ]
    }).catch(e => this.emit('error', e))
    // saving tags ids
    let tags = {}
    for (const tag of channel.availableTags) {
      const lib = {
        '–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ': 'wait',
        '–ü—Ä–∏–π–Ω—è—Ç–æ': 'accept',
        '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ': 'deny',
      }
      
      tags[
        lib[tag.name]
      ] = tag.id
    }
    // creating webhook
    const webhook = (await channel.createWebhook({
      name: this.user.username,
      avatar: await this.user.avatarURL(),
    }).catch(e => this.emit('error', e))).url
    // save the channel and alert settings to the database
    await this.db.set(`${this.collection}:${interaction.guildId}`,{
      channel: channel.id,
      alert: alert?.value || false,
      rate_limit: rate_limit?.value || 0,
      mention: mention?.value || 0,
      webhook, tags
    })
    // reply to the user with a success message and the settings that were applied
    interaction.reply({
      content: 
      `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ\n\n- –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª <#${
        channel.id
      }> –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π\n- —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∞–º –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π ${
        alert?.value ? '**–£–≤—ñ–º–∫–Ω—É—Ç–æ**' : '**–í–∏–º–∫–Ω—É—Ç–æ**'
      }\n - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥, —è–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω —á–µ–∫–∞—Ç–∏ ${
        rate_limit?.value ? `**${rate_limit?.value} c–µ–∫.**` : "**–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**"
      }\n - –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ ${
        mention?.value ? `<@&${mention?.value}> (—è–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ–∫–∏, –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —Ä–æ–ª—ñ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è)` : "**–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**"
      }`,
      ephemeral: true
    }).catch(e => this.emit('error', e))
    return    
  } else {
    // if neither name nor channel are provided, reply with an error message
    interaction.reply({ content: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω—ñ –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç \n`name`- –Ω–∞–∑–≤–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É\n`channel` - —ñ—Å–Ω—É—é—á–∏–π —Ñ–æ—Ä—É–º\n\n**–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É** ', ephemeral: true }).catch(e => this.emit('error', e))
    return
  }
}

